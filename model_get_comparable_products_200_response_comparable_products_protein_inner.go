/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetComparableProducts200ResponseComparableProductsProteinInner struct for GetComparableProducts200ResponseComparableProductsProteinInner
type GetComparableProducts200ResponseComparableProductsProteinInner struct {
	Difference float32 `json:"difference"`
	Id int32 `json:"id"`
	Image string `json:"image"`
	Title string `json:"title"`
}

// NewGetComparableProducts200ResponseComparableProductsProteinInner instantiates a new GetComparableProducts200ResponseComparableProductsProteinInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetComparableProducts200ResponseComparableProductsProteinInner(difference float32, id int32, image string, title string) *GetComparableProducts200ResponseComparableProductsProteinInner {
	this := GetComparableProducts200ResponseComparableProductsProteinInner{}
	this.Difference = difference
	this.Id = id
	this.Image = image
	this.Title = title
	return &this
}

// NewGetComparableProducts200ResponseComparableProductsProteinInnerWithDefaults instantiates a new GetComparableProducts200ResponseComparableProductsProteinInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetComparableProducts200ResponseComparableProductsProteinInnerWithDefaults() *GetComparableProducts200ResponseComparableProductsProteinInner {
	this := GetComparableProducts200ResponseComparableProductsProteinInner{}
	return &this
}

// GetDifference returns the Difference field value
func (o *GetComparableProducts200ResponseComparableProductsProteinInner) GetDifference() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Difference
}

// GetDifferenceOk returns a tuple with the Difference field value
// and a boolean to check if the value has been set.
func (o *GetComparableProducts200ResponseComparableProductsProteinInner) GetDifferenceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Difference, true
}

// SetDifference sets field value
func (o *GetComparableProducts200ResponseComparableProductsProteinInner) SetDifference(v float32) {
	o.Difference = v
}

// GetId returns the Id field value
func (o *GetComparableProducts200ResponseComparableProductsProteinInner) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GetComparableProducts200ResponseComparableProductsProteinInner) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GetComparableProducts200ResponseComparableProductsProteinInner) SetId(v int32) {
	o.Id = v
}

// GetImage returns the Image field value
func (o *GetComparableProducts200ResponseComparableProductsProteinInner) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *GetComparableProducts200ResponseComparableProductsProteinInner) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *GetComparableProducts200ResponseComparableProductsProteinInner) SetImage(v string) {
	o.Image = v
}

// GetTitle returns the Title field value
func (o *GetComparableProducts200ResponseComparableProductsProteinInner) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *GetComparableProducts200ResponseComparableProductsProteinInner) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *GetComparableProducts200ResponseComparableProductsProteinInner) SetTitle(v string) {
	o.Title = v
}

func (o GetComparableProducts200ResponseComparableProductsProteinInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["difference"] = o.Difference
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["image"] = o.Image
	}
	if true {
		toSerialize["title"] = o.Title
	}
	return json.Marshal(toSerialize)
}

type NullableGetComparableProducts200ResponseComparableProductsProteinInner struct {
	value *GetComparableProducts200ResponseComparableProductsProteinInner
	isSet bool
}

func (v NullableGetComparableProducts200ResponseComparableProductsProteinInner) Get() *GetComparableProducts200ResponseComparableProductsProteinInner {
	return v.value
}

func (v *NullableGetComparableProducts200ResponseComparableProductsProteinInner) Set(val *GetComparableProducts200ResponseComparableProductsProteinInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetComparableProducts200ResponseComparableProductsProteinInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetComparableProducts200ResponseComparableProductsProteinInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetComparableProducts200ResponseComparableProductsProteinInner(val *GetComparableProducts200ResponseComparableProductsProteinInner) *NullableGetComparableProducts200ResponseComparableProductsProteinInner {
	return &NullableGetComparableProducts200ResponseComparableProductsProteinInner{value: val, isSet: true}
}

func (v NullableGetComparableProducts200ResponseComparableProductsProteinInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetComparableProducts200ResponseComparableProductsProteinInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


