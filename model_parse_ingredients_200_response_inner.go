/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ParseIngredients200ResponseInner struct for ParseIngredients200ResponseInner
type ParseIngredients200ResponseInner struct {
	Id int32 `json:"id"`
	Original string `json:"original"`
	OriginalName string `json:"originalName"`
	Name string `json:"name"`
	NameClean string `json:"nameClean"`
	Amount float32 `json:"amount"`
	Unit string `json:"unit"`
	UnitShort string `json:"unitShort"`
	UnitLong string `json:"unitLong"`
	PossibleUnits []string `json:"possibleUnits"`
	EstimatedCost ParseIngredients200ResponseInnerEstimatedCost `json:"estimatedCost"`
	Consistency string `json:"consistency"`
	Aisle string `json:"aisle"`
	Image string `json:"image"`
	Meta []string `json:"meta"`
	Nutrition ParseIngredients200ResponseInnerNutrition `json:"nutrition"`
}

// NewParseIngredients200ResponseInner instantiates a new ParseIngredients200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParseIngredients200ResponseInner(id int32, original string, originalName string, name string, nameClean string, amount float32, unit string, unitShort string, unitLong string, possibleUnits []string, estimatedCost ParseIngredients200ResponseInnerEstimatedCost, consistency string, aisle string, image string, meta []string, nutrition ParseIngredients200ResponseInnerNutrition) *ParseIngredients200ResponseInner {
	this := ParseIngredients200ResponseInner{}
	this.Id = id
	this.Original = original
	this.OriginalName = originalName
	this.Name = name
	this.NameClean = nameClean
	this.Amount = amount
	this.Unit = unit
	this.UnitShort = unitShort
	this.UnitLong = unitLong
	this.PossibleUnits = possibleUnits
	this.EstimatedCost = estimatedCost
	this.Consistency = consistency
	this.Aisle = aisle
	this.Image = image
	this.Meta = meta
	this.Nutrition = nutrition
	return &this
}

// NewParseIngredients200ResponseInnerWithDefaults instantiates a new ParseIngredients200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParseIngredients200ResponseInnerWithDefaults() *ParseIngredients200ResponseInner {
	this := ParseIngredients200ResponseInner{}
	return &this
}

// GetId returns the Id field value
func (o *ParseIngredients200ResponseInner) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInner) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ParseIngredients200ResponseInner) SetId(v int32) {
	o.Id = v
}

// GetOriginal returns the Original field value
func (o *ParseIngredients200ResponseInner) GetOriginal() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Original
}

// GetOriginalOk returns a tuple with the Original field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInner) GetOriginalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Original, true
}

// SetOriginal sets field value
func (o *ParseIngredients200ResponseInner) SetOriginal(v string) {
	o.Original = v
}

// GetOriginalName returns the OriginalName field value
func (o *ParseIngredients200ResponseInner) GetOriginalName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalName
}

// GetOriginalNameOk returns a tuple with the OriginalName field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInner) GetOriginalNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalName, true
}

// SetOriginalName sets field value
func (o *ParseIngredients200ResponseInner) SetOriginalName(v string) {
	o.OriginalName = v
}

// GetName returns the Name field value
func (o *ParseIngredients200ResponseInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ParseIngredients200ResponseInner) SetName(v string) {
	o.Name = v
}

// GetNameClean returns the NameClean field value
func (o *ParseIngredients200ResponseInner) GetNameClean() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NameClean
}

// GetNameCleanOk returns a tuple with the NameClean field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInner) GetNameCleanOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NameClean, true
}

// SetNameClean sets field value
func (o *ParseIngredients200ResponseInner) SetNameClean(v string) {
	o.NameClean = v
}

// GetAmount returns the Amount field value
func (o *ParseIngredients200ResponseInner) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInner) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *ParseIngredients200ResponseInner) SetAmount(v float32) {
	o.Amount = v
}

// GetUnit returns the Unit field value
func (o *ParseIngredients200ResponseInner) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInner) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *ParseIngredients200ResponseInner) SetUnit(v string) {
	o.Unit = v
}

// GetUnitShort returns the UnitShort field value
func (o *ParseIngredients200ResponseInner) GetUnitShort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnitShort
}

// GetUnitShortOk returns a tuple with the UnitShort field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInner) GetUnitShortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnitShort, true
}

// SetUnitShort sets field value
func (o *ParseIngredients200ResponseInner) SetUnitShort(v string) {
	o.UnitShort = v
}

// GetUnitLong returns the UnitLong field value
func (o *ParseIngredients200ResponseInner) GetUnitLong() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnitLong
}

// GetUnitLongOk returns a tuple with the UnitLong field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInner) GetUnitLongOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnitLong, true
}

// SetUnitLong sets field value
func (o *ParseIngredients200ResponseInner) SetUnitLong(v string) {
	o.UnitLong = v
}

// GetPossibleUnits returns the PossibleUnits field value
func (o *ParseIngredients200ResponseInner) GetPossibleUnits() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PossibleUnits
}

// GetPossibleUnitsOk returns a tuple with the PossibleUnits field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInner) GetPossibleUnitsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PossibleUnits, true
}

// SetPossibleUnits sets field value
func (o *ParseIngredients200ResponseInner) SetPossibleUnits(v []string) {
	o.PossibleUnits = v
}

// GetEstimatedCost returns the EstimatedCost field value
func (o *ParseIngredients200ResponseInner) GetEstimatedCost() ParseIngredients200ResponseInnerEstimatedCost {
	if o == nil {
		var ret ParseIngredients200ResponseInnerEstimatedCost
		return ret
	}

	return o.EstimatedCost
}

// GetEstimatedCostOk returns a tuple with the EstimatedCost field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInner) GetEstimatedCostOk() (*ParseIngredients200ResponseInnerEstimatedCost, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EstimatedCost, true
}

// SetEstimatedCost sets field value
func (o *ParseIngredients200ResponseInner) SetEstimatedCost(v ParseIngredients200ResponseInnerEstimatedCost) {
	o.EstimatedCost = v
}

// GetConsistency returns the Consistency field value
func (o *ParseIngredients200ResponseInner) GetConsistency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Consistency
}

// GetConsistencyOk returns a tuple with the Consistency field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInner) GetConsistencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Consistency, true
}

// SetConsistency sets field value
func (o *ParseIngredients200ResponseInner) SetConsistency(v string) {
	o.Consistency = v
}

// GetAisle returns the Aisle field value
func (o *ParseIngredients200ResponseInner) GetAisle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Aisle
}

// GetAisleOk returns a tuple with the Aisle field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInner) GetAisleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aisle, true
}

// SetAisle sets field value
func (o *ParseIngredients200ResponseInner) SetAisle(v string) {
	o.Aisle = v
}

// GetImage returns the Image field value
func (o *ParseIngredients200ResponseInner) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInner) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *ParseIngredients200ResponseInner) SetImage(v string) {
	o.Image = v
}

// GetMeta returns the Meta field value
func (o *ParseIngredients200ResponseInner) GetMeta() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInner) GetMetaOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Meta, true
}

// SetMeta sets field value
func (o *ParseIngredients200ResponseInner) SetMeta(v []string) {
	o.Meta = v
}

// GetNutrition returns the Nutrition field value
func (o *ParseIngredients200ResponseInner) GetNutrition() ParseIngredients200ResponseInnerNutrition {
	if o == nil {
		var ret ParseIngredients200ResponseInnerNutrition
		return ret
	}

	return o.Nutrition
}

// GetNutritionOk returns a tuple with the Nutrition field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInner) GetNutritionOk() (*ParseIngredients200ResponseInnerNutrition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nutrition, true
}

// SetNutrition sets field value
func (o *ParseIngredients200ResponseInner) SetNutrition(v ParseIngredients200ResponseInnerNutrition) {
	o.Nutrition = v
}

func (o ParseIngredients200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["original"] = o.Original
	}
	if true {
		toSerialize["originalName"] = o.OriginalName
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["nameClean"] = o.NameClean
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["unit"] = o.Unit
	}
	if true {
		toSerialize["unitShort"] = o.UnitShort
	}
	if true {
		toSerialize["unitLong"] = o.UnitLong
	}
	if true {
		toSerialize["possibleUnits"] = o.PossibleUnits
	}
	if true {
		toSerialize["estimatedCost"] = o.EstimatedCost
	}
	if true {
		toSerialize["consistency"] = o.Consistency
	}
	if true {
		toSerialize["aisle"] = o.Aisle
	}
	if true {
		toSerialize["image"] = o.Image
	}
	if true {
		toSerialize["meta"] = o.Meta
	}
	if true {
		toSerialize["nutrition"] = o.Nutrition
	}
	return json.Marshal(toSerialize)
}

type NullableParseIngredients200ResponseInner struct {
	value *ParseIngredients200ResponseInner
	isSet bool
}

func (v NullableParseIngredients200ResponseInner) Get() *ParseIngredients200ResponseInner {
	return v.value
}

func (v *NullableParseIngredients200ResponseInner) Set(val *ParseIngredients200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableParseIngredients200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableParseIngredients200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParseIngredients200ResponseInner(val *ParseIngredients200ResponseInner) *NullableParseIngredients200ResponseInner {
	return &NullableParseIngredients200ResponseInner{value: val, isSet: true}
}

func (v NullableParseIngredients200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParseIngredients200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


