/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ParseIngredients200ResponseInnerNutritionCaloricBreakdown struct for ParseIngredients200ResponseInnerNutritionCaloricBreakdown
type ParseIngredients200ResponseInnerNutritionCaloricBreakdown struct {
	PercentProtein float32 `json:"percentProtein"`
	PercentFat float32 `json:"percentFat"`
	PercentCarbs float32 `json:"percentCarbs"`
}

// NewParseIngredients200ResponseInnerNutritionCaloricBreakdown instantiates a new ParseIngredients200ResponseInnerNutritionCaloricBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParseIngredients200ResponseInnerNutritionCaloricBreakdown(percentProtein float32, percentFat float32, percentCarbs float32) *ParseIngredients200ResponseInnerNutritionCaloricBreakdown {
	this := ParseIngredients200ResponseInnerNutritionCaloricBreakdown{}
	this.PercentProtein = percentProtein
	this.PercentFat = percentFat
	this.PercentCarbs = percentCarbs
	return &this
}

// NewParseIngredients200ResponseInnerNutritionCaloricBreakdownWithDefaults instantiates a new ParseIngredients200ResponseInnerNutritionCaloricBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParseIngredients200ResponseInnerNutritionCaloricBreakdownWithDefaults() *ParseIngredients200ResponseInnerNutritionCaloricBreakdown {
	this := ParseIngredients200ResponseInnerNutritionCaloricBreakdown{}
	return &this
}

// GetPercentProtein returns the PercentProtein field value
func (o *ParseIngredients200ResponseInnerNutritionCaloricBreakdown) GetPercentProtein() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PercentProtein
}

// GetPercentProteinOk returns a tuple with the PercentProtein field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInnerNutritionCaloricBreakdown) GetPercentProteinOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PercentProtein, true
}

// SetPercentProtein sets field value
func (o *ParseIngredients200ResponseInnerNutritionCaloricBreakdown) SetPercentProtein(v float32) {
	o.PercentProtein = v
}

// GetPercentFat returns the PercentFat field value
func (o *ParseIngredients200ResponseInnerNutritionCaloricBreakdown) GetPercentFat() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PercentFat
}

// GetPercentFatOk returns a tuple with the PercentFat field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInnerNutritionCaloricBreakdown) GetPercentFatOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PercentFat, true
}

// SetPercentFat sets field value
func (o *ParseIngredients200ResponseInnerNutritionCaloricBreakdown) SetPercentFat(v float32) {
	o.PercentFat = v
}

// GetPercentCarbs returns the PercentCarbs field value
func (o *ParseIngredients200ResponseInnerNutritionCaloricBreakdown) GetPercentCarbs() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PercentCarbs
}

// GetPercentCarbsOk returns a tuple with the PercentCarbs field value
// and a boolean to check if the value has been set.
func (o *ParseIngredients200ResponseInnerNutritionCaloricBreakdown) GetPercentCarbsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PercentCarbs, true
}

// SetPercentCarbs sets field value
func (o *ParseIngredients200ResponseInnerNutritionCaloricBreakdown) SetPercentCarbs(v float32) {
	o.PercentCarbs = v
}

func (o ParseIngredients200ResponseInnerNutritionCaloricBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["percentProtein"] = o.PercentProtein
	}
	if true {
		toSerialize["percentFat"] = o.PercentFat
	}
	if true {
		toSerialize["percentCarbs"] = o.PercentCarbs
	}
	return json.Marshal(toSerialize)
}

type NullableParseIngredients200ResponseInnerNutritionCaloricBreakdown struct {
	value *ParseIngredients200ResponseInnerNutritionCaloricBreakdown
	isSet bool
}

func (v NullableParseIngredients200ResponseInnerNutritionCaloricBreakdown) Get() *ParseIngredients200ResponseInnerNutritionCaloricBreakdown {
	return v.value
}

func (v *NullableParseIngredients200ResponseInnerNutritionCaloricBreakdown) Set(val *ParseIngredients200ResponseInnerNutritionCaloricBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableParseIngredients200ResponseInnerNutritionCaloricBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableParseIngredients200ResponseInnerNutritionCaloricBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParseIngredients200ResponseInnerNutritionCaloricBreakdown(val *ParseIngredients200ResponseInnerNutritionCaloricBreakdown) *NullableParseIngredients200ResponseInnerNutritionCaloricBreakdown {
	return &NullableParseIngredients200ResponseInnerNutritionCaloricBreakdown{value: val, isSet: true}
}

func (v NullableParseIngredients200ResponseInnerNutritionCaloricBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParseIngredients200ResponseInnerNutritionCaloricBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


