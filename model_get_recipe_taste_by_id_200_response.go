/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetRecipeTasteByID200Response 
type GetRecipeTasteByID200Response struct {
	Sweetness float32 `json:"sweetness"`
	Saltiness float32 `json:"saltiness"`
	Sourness float32 `json:"sourness"`
	Bitterness float32 `json:"bitterness"`
	Savoriness float32 `json:"savoriness"`
	Fattiness float32 `json:"fattiness"`
	Spiciness float32 `json:"spiciness"`
}

// NewGetRecipeTasteByID200Response instantiates a new GetRecipeTasteByID200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRecipeTasteByID200Response(sweetness float32, saltiness float32, sourness float32, bitterness float32, savoriness float32, fattiness float32, spiciness float32) *GetRecipeTasteByID200Response {
	this := GetRecipeTasteByID200Response{}
	this.Sweetness = sweetness
	this.Saltiness = saltiness
	this.Sourness = sourness
	this.Bitterness = bitterness
	this.Savoriness = savoriness
	this.Fattiness = fattiness
	this.Spiciness = spiciness
	return &this
}

// NewGetRecipeTasteByID200ResponseWithDefaults instantiates a new GetRecipeTasteByID200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRecipeTasteByID200ResponseWithDefaults() *GetRecipeTasteByID200Response {
	this := GetRecipeTasteByID200Response{}
	return &this
}

// GetSweetness returns the Sweetness field value
func (o *GetRecipeTasteByID200Response) GetSweetness() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Sweetness
}

// GetSweetnessOk returns a tuple with the Sweetness field value
// and a boolean to check if the value has been set.
func (o *GetRecipeTasteByID200Response) GetSweetnessOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sweetness, true
}

// SetSweetness sets field value
func (o *GetRecipeTasteByID200Response) SetSweetness(v float32) {
	o.Sweetness = v
}

// GetSaltiness returns the Saltiness field value
func (o *GetRecipeTasteByID200Response) GetSaltiness() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Saltiness
}

// GetSaltinessOk returns a tuple with the Saltiness field value
// and a boolean to check if the value has been set.
func (o *GetRecipeTasteByID200Response) GetSaltinessOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Saltiness, true
}

// SetSaltiness sets field value
func (o *GetRecipeTasteByID200Response) SetSaltiness(v float32) {
	o.Saltiness = v
}

// GetSourness returns the Sourness field value
func (o *GetRecipeTasteByID200Response) GetSourness() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Sourness
}

// GetSournessOk returns a tuple with the Sourness field value
// and a boolean to check if the value has been set.
func (o *GetRecipeTasteByID200Response) GetSournessOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sourness, true
}

// SetSourness sets field value
func (o *GetRecipeTasteByID200Response) SetSourness(v float32) {
	o.Sourness = v
}

// GetBitterness returns the Bitterness field value
func (o *GetRecipeTasteByID200Response) GetBitterness() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Bitterness
}

// GetBitternessOk returns a tuple with the Bitterness field value
// and a boolean to check if the value has been set.
func (o *GetRecipeTasteByID200Response) GetBitternessOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bitterness, true
}

// SetBitterness sets field value
func (o *GetRecipeTasteByID200Response) SetBitterness(v float32) {
	o.Bitterness = v
}

// GetSavoriness returns the Savoriness field value
func (o *GetRecipeTasteByID200Response) GetSavoriness() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Savoriness
}

// GetSavorinessOk returns a tuple with the Savoriness field value
// and a boolean to check if the value has been set.
func (o *GetRecipeTasteByID200Response) GetSavorinessOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Savoriness, true
}

// SetSavoriness sets field value
func (o *GetRecipeTasteByID200Response) SetSavoriness(v float32) {
	o.Savoriness = v
}

// GetFattiness returns the Fattiness field value
func (o *GetRecipeTasteByID200Response) GetFattiness() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Fattiness
}

// GetFattinessOk returns a tuple with the Fattiness field value
// and a boolean to check if the value has been set.
func (o *GetRecipeTasteByID200Response) GetFattinessOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fattiness, true
}

// SetFattiness sets field value
func (o *GetRecipeTasteByID200Response) SetFattiness(v float32) {
	o.Fattiness = v
}

// GetSpiciness returns the Spiciness field value
func (o *GetRecipeTasteByID200Response) GetSpiciness() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Spiciness
}

// GetSpicinessOk returns a tuple with the Spiciness field value
// and a boolean to check if the value has been set.
func (o *GetRecipeTasteByID200Response) GetSpicinessOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Spiciness, true
}

// SetSpiciness sets field value
func (o *GetRecipeTasteByID200Response) SetSpiciness(v float32) {
	o.Spiciness = v
}

func (o GetRecipeTasteByID200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sweetness"] = o.Sweetness
	}
	if true {
		toSerialize["saltiness"] = o.Saltiness
	}
	if true {
		toSerialize["sourness"] = o.Sourness
	}
	if true {
		toSerialize["bitterness"] = o.Bitterness
	}
	if true {
		toSerialize["savoriness"] = o.Savoriness
	}
	if true {
		toSerialize["fattiness"] = o.Fattiness
	}
	if true {
		toSerialize["spiciness"] = o.Spiciness
	}
	return json.Marshal(toSerialize)
}

type NullableGetRecipeTasteByID200Response struct {
	value *GetRecipeTasteByID200Response
	isSet bool
}

func (v NullableGetRecipeTasteByID200Response) Get() *GetRecipeTasteByID200Response {
	return v.value
}

func (v *NullableGetRecipeTasteByID200Response) Set(val *GetRecipeTasteByID200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRecipeTasteByID200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRecipeTasteByID200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRecipeTasteByID200Response(val *GetRecipeTasteByID200Response) *NullableGetRecipeTasteByID200Response {
	return &NullableGetRecipeTasteByID200Response{value: val, isSet: true}
}

func (v NullableGetRecipeTasteByID200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRecipeTasteByID200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


