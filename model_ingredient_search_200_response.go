/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IngredientSearch200Response 
type IngredientSearch200Response struct {
	Results []IngredientSearch200ResponseResultsInner `json:"results"`
	Offset int32 `json:"offset"`
	Number int32 `json:"number"`
	TotalResults int32 `json:"totalResults"`
}

// NewIngredientSearch200Response instantiates a new IngredientSearch200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngredientSearch200Response(results []IngredientSearch200ResponseResultsInner, offset int32, number int32, totalResults int32) *IngredientSearch200Response {
	this := IngredientSearch200Response{}
	this.Results = results
	this.Offset = offset
	this.Number = number
	this.TotalResults = totalResults
	return &this
}

// NewIngredientSearch200ResponseWithDefaults instantiates a new IngredientSearch200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngredientSearch200ResponseWithDefaults() *IngredientSearch200Response {
	this := IngredientSearch200Response{}
	return &this
}

// GetResults returns the Results field value
func (o *IngredientSearch200Response) GetResults() []IngredientSearch200ResponseResultsInner {
	if o == nil {
		var ret []IngredientSearch200ResponseResultsInner
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *IngredientSearch200Response) GetResultsOk() ([]IngredientSearch200ResponseResultsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *IngredientSearch200Response) SetResults(v []IngredientSearch200ResponseResultsInner) {
	o.Results = v
}

// GetOffset returns the Offset field value
func (o *IngredientSearch200Response) GetOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *IngredientSearch200Response) GetOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *IngredientSearch200Response) SetOffset(v int32) {
	o.Offset = v
}

// GetNumber returns the Number field value
func (o *IngredientSearch200Response) GetNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *IngredientSearch200Response) GetNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *IngredientSearch200Response) SetNumber(v int32) {
	o.Number = v
}

// GetTotalResults returns the TotalResults field value
func (o *IngredientSearch200Response) GetTotalResults() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value
// and a boolean to check if the value has been set.
func (o *IngredientSearch200Response) GetTotalResultsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalResults, true
}

// SetTotalResults sets field value
func (o *IngredientSearch200Response) SetTotalResults(v int32) {
	o.TotalResults = v
}

func (o IngredientSearch200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["results"] = o.Results
	}
	if true {
		toSerialize["offset"] = o.Offset
	}
	if true {
		toSerialize["number"] = o.Number
	}
	if true {
		toSerialize["totalResults"] = o.TotalResults
	}
	return json.Marshal(toSerialize)
}

type NullableIngredientSearch200Response struct {
	value *IngredientSearch200Response
	isSet bool
}

func (v NullableIngredientSearch200Response) Get() *IngredientSearch200Response {
	return v.value
}

func (v *NullableIngredientSearch200Response) Set(val *IngredientSearch200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableIngredientSearch200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableIngredientSearch200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngredientSearch200Response(val *IngredientSearch200Response) *NullableIngredientSearch200Response {
	return &NullableIngredientSearch200Response{value: val, isSet: true}
}

func (v NullableIngredientSearch200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngredientSearch200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


