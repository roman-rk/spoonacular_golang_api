/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConvertAmounts200Response 
type ConvertAmounts200Response struct {
	SourceAmount float32 `json:"sourceAmount"`
	SourceUnit string `json:"sourceUnit"`
	TargetAmount float32 `json:"targetAmount"`
	TargetUnit string `json:"targetUnit"`
	Answer string `json:"answer"`
}

// NewConvertAmounts200Response instantiates a new ConvertAmounts200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConvertAmounts200Response(sourceAmount float32, sourceUnit string, targetAmount float32, targetUnit string, answer string) *ConvertAmounts200Response {
	this := ConvertAmounts200Response{}
	this.SourceAmount = sourceAmount
	this.SourceUnit = sourceUnit
	this.TargetAmount = targetAmount
	this.TargetUnit = targetUnit
	this.Answer = answer
	return &this
}

// NewConvertAmounts200ResponseWithDefaults instantiates a new ConvertAmounts200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConvertAmounts200ResponseWithDefaults() *ConvertAmounts200Response {
	this := ConvertAmounts200Response{}
	return &this
}

// GetSourceAmount returns the SourceAmount field value
func (o *ConvertAmounts200Response) GetSourceAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SourceAmount
}

// GetSourceAmountOk returns a tuple with the SourceAmount field value
// and a boolean to check if the value has been set.
func (o *ConvertAmounts200Response) GetSourceAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceAmount, true
}

// SetSourceAmount sets field value
func (o *ConvertAmounts200Response) SetSourceAmount(v float32) {
	o.SourceAmount = v
}

// GetSourceUnit returns the SourceUnit field value
func (o *ConvertAmounts200Response) GetSourceUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceUnit
}

// GetSourceUnitOk returns a tuple with the SourceUnit field value
// and a boolean to check if the value has been set.
func (o *ConvertAmounts200Response) GetSourceUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceUnit, true
}

// SetSourceUnit sets field value
func (o *ConvertAmounts200Response) SetSourceUnit(v string) {
	o.SourceUnit = v
}

// GetTargetAmount returns the TargetAmount field value
func (o *ConvertAmounts200Response) GetTargetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TargetAmount
}

// GetTargetAmountOk returns a tuple with the TargetAmount field value
// and a boolean to check if the value has been set.
func (o *ConvertAmounts200Response) GetTargetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetAmount, true
}

// SetTargetAmount sets field value
func (o *ConvertAmounts200Response) SetTargetAmount(v float32) {
	o.TargetAmount = v
}

// GetTargetUnit returns the TargetUnit field value
func (o *ConvertAmounts200Response) GetTargetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetUnit
}

// GetTargetUnitOk returns a tuple with the TargetUnit field value
// and a boolean to check if the value has been set.
func (o *ConvertAmounts200Response) GetTargetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetUnit, true
}

// SetTargetUnit sets field value
func (o *ConvertAmounts200Response) SetTargetUnit(v string) {
	o.TargetUnit = v
}

// GetAnswer returns the Answer field value
func (o *ConvertAmounts200Response) GetAnswer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Answer
}

// GetAnswerOk returns a tuple with the Answer field value
// and a boolean to check if the value has been set.
func (o *ConvertAmounts200Response) GetAnswerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Answer, true
}

// SetAnswer sets field value
func (o *ConvertAmounts200Response) SetAnswer(v string) {
	o.Answer = v
}

func (o ConvertAmounts200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sourceAmount"] = o.SourceAmount
	}
	if true {
		toSerialize["sourceUnit"] = o.SourceUnit
	}
	if true {
		toSerialize["targetAmount"] = o.TargetAmount
	}
	if true {
		toSerialize["targetUnit"] = o.TargetUnit
	}
	if true {
		toSerialize["answer"] = o.Answer
	}
	return json.Marshal(toSerialize)
}

type NullableConvertAmounts200Response struct {
	value *ConvertAmounts200Response
	isSet bool
}

func (v NullableConvertAmounts200Response) Get() *ConvertAmounts200Response {
	return v.value
}

func (v *NullableConvertAmounts200Response) Set(val *ConvertAmounts200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableConvertAmounts200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableConvertAmounts200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConvertAmounts200Response(val *ConvertAmounts200Response) *NullableConvertAmounts200Response {
	return &NullableConvertAmounts200Response{value: val, isSet: true}
}

func (v NullableConvertAmounts200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConvertAmounts200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


