/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SearchRestaurants200ResponseRestaurantsInnerAddress struct for SearchRestaurants200ResponseRestaurantsInnerAddress
type SearchRestaurants200ResponseRestaurantsInnerAddress struct {
	StreetAddr *string `json:"street_addr,omitempty"`
	City *string `json:"city,omitempty"`
	State *string `json:"state,omitempty"`
	Zipcode *string `json:"zipcode,omitempty"`
	Country *string `json:"country,omitempty"`
	Lat *float32 `json:"lat,omitempty"`
	Lon *float32 `json:"lon,omitempty"`
	StreetAddr2 *string `json:"street_addr_2,omitempty"`
	Latitude *float32 `json:"latitude,omitempty"`
	Longitude *float32 `json:"longitude,omitempty"`
}

// NewSearchRestaurants200ResponseRestaurantsInnerAddress instantiates a new SearchRestaurants200ResponseRestaurantsInnerAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchRestaurants200ResponseRestaurantsInnerAddress() *SearchRestaurants200ResponseRestaurantsInnerAddress {
	this := SearchRestaurants200ResponseRestaurantsInnerAddress{}
	return &this
}

// NewSearchRestaurants200ResponseRestaurantsInnerAddressWithDefaults instantiates a new SearchRestaurants200ResponseRestaurantsInnerAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchRestaurants200ResponseRestaurantsInnerAddressWithDefaults() *SearchRestaurants200ResponseRestaurantsInnerAddress {
	this := SearchRestaurants200ResponseRestaurantsInnerAddress{}
	return &this
}

// GetStreetAddr returns the StreetAddr field value if set, zero value otherwise.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetStreetAddr() string {
	if o == nil || o.StreetAddr == nil {
		var ret string
		return ret
	}
	return *o.StreetAddr
}

// GetStreetAddrOk returns a tuple with the StreetAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetStreetAddrOk() (*string, bool) {
	if o == nil || o.StreetAddr == nil {
		return nil, false
	}
	return o.StreetAddr, true
}

// HasStreetAddr returns a boolean if a field has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) HasStreetAddr() bool {
	if o != nil && o.StreetAddr != nil {
		return true
	}

	return false
}

// SetStreetAddr gets a reference to the given string and assigns it to the StreetAddr field.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) SetStreetAddr(v string) {
	o.StreetAddr = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) SetState(v string) {
	o.State = &v
}

// GetZipcode returns the Zipcode field value if set, zero value otherwise.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetZipcode() string {
	if o == nil || o.Zipcode == nil {
		var ret string
		return ret
	}
	return *o.Zipcode
}

// GetZipcodeOk returns a tuple with the Zipcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetZipcodeOk() (*string, bool) {
	if o == nil || o.Zipcode == nil {
		return nil, false
	}
	return o.Zipcode, true
}

// HasZipcode returns a boolean if a field has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) HasZipcode() bool {
	if o != nil && o.Zipcode != nil {
		return true
	}

	return false
}

// SetZipcode gets a reference to the given string and assigns it to the Zipcode field.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) SetZipcode(v string) {
	o.Zipcode = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) SetCountry(v string) {
	o.Country = &v
}

// GetLat returns the Lat field value if set, zero value otherwise.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetLat() float32 {
	if o == nil || o.Lat == nil {
		var ret float32
		return ret
	}
	return *o.Lat
}

// GetLatOk returns a tuple with the Lat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetLatOk() (*float32, bool) {
	if o == nil || o.Lat == nil {
		return nil, false
	}
	return o.Lat, true
}

// HasLat returns a boolean if a field has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) HasLat() bool {
	if o != nil && o.Lat != nil {
		return true
	}

	return false
}

// SetLat gets a reference to the given float32 and assigns it to the Lat field.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) SetLat(v float32) {
	o.Lat = &v
}

// GetLon returns the Lon field value if set, zero value otherwise.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetLon() float32 {
	if o == nil || o.Lon == nil {
		var ret float32
		return ret
	}
	return *o.Lon
}

// GetLonOk returns a tuple with the Lon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetLonOk() (*float32, bool) {
	if o == nil || o.Lon == nil {
		return nil, false
	}
	return o.Lon, true
}

// HasLon returns a boolean if a field has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) HasLon() bool {
	if o != nil && o.Lon != nil {
		return true
	}

	return false
}

// SetLon gets a reference to the given float32 and assigns it to the Lon field.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) SetLon(v float32) {
	o.Lon = &v
}

// GetStreetAddr2 returns the StreetAddr2 field value if set, zero value otherwise.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetStreetAddr2() string {
	if o == nil || o.StreetAddr2 == nil {
		var ret string
		return ret
	}
	return *o.StreetAddr2
}

// GetStreetAddr2Ok returns a tuple with the StreetAddr2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetStreetAddr2Ok() (*string, bool) {
	if o == nil || o.StreetAddr2 == nil {
		return nil, false
	}
	return o.StreetAddr2, true
}

// HasStreetAddr2 returns a boolean if a field has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) HasStreetAddr2() bool {
	if o != nil && o.StreetAddr2 != nil {
		return true
	}

	return false
}

// SetStreetAddr2 gets a reference to the given string and assigns it to the StreetAddr2 field.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) SetStreetAddr2(v string) {
	o.StreetAddr2 = &v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetLatitude() float32 {
	if o == nil || o.Latitude == nil {
		var ret float32
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetLatitudeOk() (*float32, bool) {
	if o == nil || o.Latitude == nil {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) HasLatitude() bool {
	if o != nil && o.Latitude != nil {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float32 and assigns it to the Latitude field.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) SetLatitude(v float32) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetLongitude() float32 {
	if o == nil || o.Longitude == nil {
		var ret float32
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) GetLongitudeOk() (*float32, bool) {
	if o == nil || o.Longitude == nil {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) HasLongitude() bool {
	if o != nil && o.Longitude != nil {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float32 and assigns it to the Longitude field.
func (o *SearchRestaurants200ResponseRestaurantsInnerAddress) SetLongitude(v float32) {
	o.Longitude = &v
}

func (o SearchRestaurants200ResponseRestaurantsInnerAddress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StreetAddr != nil {
		toSerialize["street_addr"] = o.StreetAddr
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Zipcode != nil {
		toSerialize["zipcode"] = o.Zipcode
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.Lat != nil {
		toSerialize["lat"] = o.Lat
	}
	if o.Lon != nil {
		toSerialize["lon"] = o.Lon
	}
	if o.StreetAddr2 != nil {
		toSerialize["street_addr_2"] = o.StreetAddr2
	}
	if o.Latitude != nil {
		toSerialize["latitude"] = o.Latitude
	}
	if o.Longitude != nil {
		toSerialize["longitude"] = o.Longitude
	}
	return json.Marshal(toSerialize)
}

type NullableSearchRestaurants200ResponseRestaurantsInnerAddress struct {
	value *SearchRestaurants200ResponseRestaurantsInnerAddress
	isSet bool
}

func (v NullableSearchRestaurants200ResponseRestaurantsInnerAddress) Get() *SearchRestaurants200ResponseRestaurantsInnerAddress {
	return v.value
}

func (v *NullableSearchRestaurants200ResponseRestaurantsInnerAddress) Set(val *SearchRestaurants200ResponseRestaurantsInnerAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchRestaurants200ResponseRestaurantsInnerAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchRestaurants200ResponseRestaurantsInnerAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchRestaurants200ResponseRestaurantsInnerAddress(val *SearchRestaurants200ResponseRestaurantsInnerAddress) *NullableSearchRestaurants200ResponseRestaurantsInnerAddress {
	return &NullableSearchRestaurants200ResponseRestaurantsInnerAddress{value: val, isSet: true}
}

func (v NullableSearchRestaurants200ResponseRestaurantsInnerAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchRestaurants200ResponseRestaurantsInnerAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


