/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SearchRecipesByIngredients200ResponseInner struct for SearchRecipesByIngredients200ResponseInner
type SearchRecipesByIngredients200ResponseInner struct {
	Id int32 `json:"id"`
	Image string `json:"image"`
	ImageType string `json:"imageType"`
	Likes int32 `json:"likes"`
	MissedIngredientCount int32 `json:"missedIngredientCount"`
	MissedIngredients []SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner `json:"missedIngredients"`
	Title string `json:"title"`
	UnusedIngredients []map[string]interface{} `json:"unusedIngredients"`
	UsedIngredientCount float32 `json:"usedIngredientCount"`
	UsedIngredients []SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner `json:"usedIngredients"`
}

// NewSearchRecipesByIngredients200ResponseInner instantiates a new SearchRecipesByIngredients200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchRecipesByIngredients200ResponseInner(id int32, image string, imageType string, likes int32, missedIngredientCount int32, missedIngredients []SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner, title string, unusedIngredients []map[string]interface{}, usedIngredientCount float32, usedIngredients []SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner) *SearchRecipesByIngredients200ResponseInner {
	this := SearchRecipesByIngredients200ResponseInner{}
	this.Id = id
	this.Image = image
	this.ImageType = imageType
	this.Likes = likes
	this.MissedIngredientCount = missedIngredientCount
	this.MissedIngredients = missedIngredients
	this.Title = title
	this.UnusedIngredients = unusedIngredients
	this.UsedIngredientCount = usedIngredientCount
	this.UsedIngredients = usedIngredients
	return &this
}

// NewSearchRecipesByIngredients200ResponseInnerWithDefaults instantiates a new SearchRecipesByIngredients200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchRecipesByIngredients200ResponseInnerWithDefaults() *SearchRecipesByIngredients200ResponseInner {
	this := SearchRecipesByIngredients200ResponseInner{}
	return &this
}

// GetId returns the Id field value
func (o *SearchRecipesByIngredients200ResponseInner) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SearchRecipesByIngredients200ResponseInner) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SearchRecipesByIngredients200ResponseInner) SetId(v int32) {
	o.Id = v
}

// GetImage returns the Image field value
func (o *SearchRecipesByIngredients200ResponseInner) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *SearchRecipesByIngredients200ResponseInner) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *SearchRecipesByIngredients200ResponseInner) SetImage(v string) {
	o.Image = v
}

// GetImageType returns the ImageType field value
func (o *SearchRecipesByIngredients200ResponseInner) GetImageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageType
}

// GetImageTypeOk returns a tuple with the ImageType field value
// and a boolean to check if the value has been set.
func (o *SearchRecipesByIngredients200ResponseInner) GetImageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageType, true
}

// SetImageType sets field value
func (o *SearchRecipesByIngredients200ResponseInner) SetImageType(v string) {
	o.ImageType = v
}

// GetLikes returns the Likes field value
func (o *SearchRecipesByIngredients200ResponseInner) GetLikes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Likes
}

// GetLikesOk returns a tuple with the Likes field value
// and a boolean to check if the value has been set.
func (o *SearchRecipesByIngredients200ResponseInner) GetLikesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Likes, true
}

// SetLikes sets field value
func (o *SearchRecipesByIngredients200ResponseInner) SetLikes(v int32) {
	o.Likes = v
}

// GetMissedIngredientCount returns the MissedIngredientCount field value
func (o *SearchRecipesByIngredients200ResponseInner) GetMissedIngredientCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MissedIngredientCount
}

// GetMissedIngredientCountOk returns a tuple with the MissedIngredientCount field value
// and a boolean to check if the value has been set.
func (o *SearchRecipesByIngredients200ResponseInner) GetMissedIngredientCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MissedIngredientCount, true
}

// SetMissedIngredientCount sets field value
func (o *SearchRecipesByIngredients200ResponseInner) SetMissedIngredientCount(v int32) {
	o.MissedIngredientCount = v
}

// GetMissedIngredients returns the MissedIngredients field value
func (o *SearchRecipesByIngredients200ResponseInner) GetMissedIngredients() []SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner {
	if o == nil {
		var ret []SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner
		return ret
	}

	return o.MissedIngredients
}

// GetMissedIngredientsOk returns a tuple with the MissedIngredients field value
// and a boolean to check if the value has been set.
func (o *SearchRecipesByIngredients200ResponseInner) GetMissedIngredientsOk() ([]SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.MissedIngredients, true
}

// SetMissedIngredients sets field value
func (o *SearchRecipesByIngredients200ResponseInner) SetMissedIngredients(v []SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner) {
	o.MissedIngredients = v
}

// GetTitle returns the Title field value
func (o *SearchRecipesByIngredients200ResponseInner) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *SearchRecipesByIngredients200ResponseInner) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *SearchRecipesByIngredients200ResponseInner) SetTitle(v string) {
	o.Title = v
}

// GetUnusedIngredients returns the UnusedIngredients field value
func (o *SearchRecipesByIngredients200ResponseInner) GetUnusedIngredients() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.UnusedIngredients
}

// GetUnusedIngredientsOk returns a tuple with the UnusedIngredients field value
// and a boolean to check if the value has been set.
func (o *SearchRecipesByIngredients200ResponseInner) GetUnusedIngredientsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnusedIngredients, true
}

// SetUnusedIngredients sets field value
func (o *SearchRecipesByIngredients200ResponseInner) SetUnusedIngredients(v []map[string]interface{}) {
	o.UnusedIngredients = v
}

// GetUsedIngredientCount returns the UsedIngredientCount field value
func (o *SearchRecipesByIngredients200ResponseInner) GetUsedIngredientCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UsedIngredientCount
}

// GetUsedIngredientCountOk returns a tuple with the UsedIngredientCount field value
// and a boolean to check if the value has been set.
func (o *SearchRecipesByIngredients200ResponseInner) GetUsedIngredientCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsedIngredientCount, true
}

// SetUsedIngredientCount sets field value
func (o *SearchRecipesByIngredients200ResponseInner) SetUsedIngredientCount(v float32) {
	o.UsedIngredientCount = v
}

// GetUsedIngredients returns the UsedIngredients field value
func (o *SearchRecipesByIngredients200ResponseInner) GetUsedIngredients() []SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner {
	if o == nil {
		var ret []SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner
		return ret
	}

	return o.UsedIngredients
}

// GetUsedIngredientsOk returns a tuple with the UsedIngredients field value
// and a boolean to check if the value has been set.
func (o *SearchRecipesByIngredients200ResponseInner) GetUsedIngredientsOk() ([]SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsedIngredients, true
}

// SetUsedIngredients sets field value
func (o *SearchRecipesByIngredients200ResponseInner) SetUsedIngredients(v []SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner) {
	o.UsedIngredients = v
}

func (o SearchRecipesByIngredients200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["image"] = o.Image
	}
	if true {
		toSerialize["imageType"] = o.ImageType
	}
	if true {
		toSerialize["likes"] = o.Likes
	}
	if true {
		toSerialize["missedIngredientCount"] = o.MissedIngredientCount
	}
	if true {
		toSerialize["missedIngredients"] = o.MissedIngredients
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["unusedIngredients"] = o.UnusedIngredients
	}
	if true {
		toSerialize["usedIngredientCount"] = o.UsedIngredientCount
	}
	if true {
		toSerialize["usedIngredients"] = o.UsedIngredients
	}
	return json.Marshal(toSerialize)
}

type NullableSearchRecipesByIngredients200ResponseInner struct {
	value *SearchRecipesByIngredients200ResponseInner
	isSet bool
}

func (v NullableSearchRecipesByIngredients200ResponseInner) Get() *SearchRecipesByIngredients200ResponseInner {
	return v.value
}

func (v *NullableSearchRecipesByIngredients200ResponseInner) Set(val *SearchRecipesByIngredients200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchRecipesByIngredients200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchRecipesByIngredients200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchRecipesByIngredients200ResponseInner(val *SearchRecipesByIngredients200ResponseInner) *NullableSearchRecipesByIngredients200ResponseInner {
	return &NullableSearchRecipesByIngredients200ResponseInner{value: val, isSet: true}
}

func (v NullableSearchRecipesByIngredients200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchRecipesByIngredients200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


