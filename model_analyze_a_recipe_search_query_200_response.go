/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AnalyzeARecipeSearchQuery200Response 
type AnalyzeARecipeSearchQuery200Response struct {
	Dishes []AnalyzeARecipeSearchQuery200ResponseDishesInner `json:"dishes"`
	Ingredients []AnalyzeARecipeSearchQuery200ResponseIngredientsInner `json:"ingredients"`
	Cuisines []string `json:"cuisines"`
	Modifiers []string `json:"modifiers"`
}

// NewAnalyzeARecipeSearchQuery200Response instantiates a new AnalyzeARecipeSearchQuery200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyzeARecipeSearchQuery200Response(dishes []AnalyzeARecipeSearchQuery200ResponseDishesInner, ingredients []AnalyzeARecipeSearchQuery200ResponseIngredientsInner, cuisines []string, modifiers []string) *AnalyzeARecipeSearchQuery200Response {
	this := AnalyzeARecipeSearchQuery200Response{}
	this.Dishes = dishes
	this.Ingredients = ingredients
	this.Cuisines = cuisines
	this.Modifiers = modifiers
	return &this
}

// NewAnalyzeARecipeSearchQuery200ResponseWithDefaults instantiates a new AnalyzeARecipeSearchQuery200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyzeARecipeSearchQuery200ResponseWithDefaults() *AnalyzeARecipeSearchQuery200Response {
	this := AnalyzeARecipeSearchQuery200Response{}
	return &this
}

// GetDishes returns the Dishes field value
func (o *AnalyzeARecipeSearchQuery200Response) GetDishes() []AnalyzeARecipeSearchQuery200ResponseDishesInner {
	if o == nil {
		var ret []AnalyzeARecipeSearchQuery200ResponseDishesInner
		return ret
	}

	return o.Dishes
}

// GetDishesOk returns a tuple with the Dishes field value
// and a boolean to check if the value has been set.
func (o *AnalyzeARecipeSearchQuery200Response) GetDishesOk() ([]AnalyzeARecipeSearchQuery200ResponseDishesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dishes, true
}

// SetDishes sets field value
func (o *AnalyzeARecipeSearchQuery200Response) SetDishes(v []AnalyzeARecipeSearchQuery200ResponseDishesInner) {
	o.Dishes = v
}

// GetIngredients returns the Ingredients field value
func (o *AnalyzeARecipeSearchQuery200Response) GetIngredients() []AnalyzeARecipeSearchQuery200ResponseIngredientsInner {
	if o == nil {
		var ret []AnalyzeARecipeSearchQuery200ResponseIngredientsInner
		return ret
	}

	return o.Ingredients
}

// GetIngredientsOk returns a tuple with the Ingredients field value
// and a boolean to check if the value has been set.
func (o *AnalyzeARecipeSearchQuery200Response) GetIngredientsOk() ([]AnalyzeARecipeSearchQuery200ResponseIngredientsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ingredients, true
}

// SetIngredients sets field value
func (o *AnalyzeARecipeSearchQuery200Response) SetIngredients(v []AnalyzeARecipeSearchQuery200ResponseIngredientsInner) {
	o.Ingredients = v
}

// GetCuisines returns the Cuisines field value
func (o *AnalyzeARecipeSearchQuery200Response) GetCuisines() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Cuisines
}

// GetCuisinesOk returns a tuple with the Cuisines field value
// and a boolean to check if the value has been set.
func (o *AnalyzeARecipeSearchQuery200Response) GetCuisinesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cuisines, true
}

// SetCuisines sets field value
func (o *AnalyzeARecipeSearchQuery200Response) SetCuisines(v []string) {
	o.Cuisines = v
}

// GetModifiers returns the Modifiers field value
func (o *AnalyzeARecipeSearchQuery200Response) GetModifiers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Modifiers
}

// GetModifiersOk returns a tuple with the Modifiers field value
// and a boolean to check if the value has been set.
func (o *AnalyzeARecipeSearchQuery200Response) GetModifiersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Modifiers, true
}

// SetModifiers sets field value
func (o *AnalyzeARecipeSearchQuery200Response) SetModifiers(v []string) {
	o.Modifiers = v
}

func (o AnalyzeARecipeSearchQuery200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["dishes"] = o.Dishes
	}
	if true {
		toSerialize["ingredients"] = o.Ingredients
	}
	if true {
		toSerialize["cuisines"] = o.Cuisines
	}
	if true {
		toSerialize["modifiers"] = o.Modifiers
	}
	return json.Marshal(toSerialize)
}

type NullableAnalyzeARecipeSearchQuery200Response struct {
	value *AnalyzeARecipeSearchQuery200Response
	isSet bool
}

func (v NullableAnalyzeARecipeSearchQuery200Response) Get() *AnalyzeARecipeSearchQuery200Response {
	return v.value
}

func (v *NullableAnalyzeARecipeSearchQuery200Response) Set(val *AnalyzeARecipeSearchQuery200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyzeARecipeSearchQuery200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyzeARecipeSearchQuery200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyzeARecipeSearchQuery200Response(val *AnalyzeARecipeSearchQuery200Response) *NullableAnalyzeARecipeSearchQuery200Response {
	return &NullableAnalyzeARecipeSearchQuery200Response{value: val, isSet: true}
}

func (v NullableAnalyzeARecipeSearchQuery200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyzeARecipeSearchQuery200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


