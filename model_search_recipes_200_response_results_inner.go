/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SearchRecipes200ResponseResultsInner struct for SearchRecipes200ResponseResultsInner
type SearchRecipes200ResponseResultsInner struct {
	Id int32 `json:"id"`
	Title string `json:"title"`
	Calories float32 `json:"calories"`
	Carbs string `json:"carbs"`
	Fat string `json:"fat"`
	Image string `json:"image"`
	ImageType string `json:"imageType"`
	Protein string `json:"protein"`
}

// NewSearchRecipes200ResponseResultsInner instantiates a new SearchRecipes200ResponseResultsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchRecipes200ResponseResultsInner(id int32, title string, calories float32, carbs string, fat string, image string, imageType string, protein string) *SearchRecipes200ResponseResultsInner {
	this := SearchRecipes200ResponseResultsInner{}
	this.Id = id
	this.Title = title
	this.Calories = calories
	this.Carbs = carbs
	this.Fat = fat
	this.Image = image
	this.ImageType = imageType
	this.Protein = protein
	return &this
}

// NewSearchRecipes200ResponseResultsInnerWithDefaults instantiates a new SearchRecipes200ResponseResultsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchRecipes200ResponseResultsInnerWithDefaults() *SearchRecipes200ResponseResultsInner {
	this := SearchRecipes200ResponseResultsInner{}
	return &this
}

// GetId returns the Id field value
func (o *SearchRecipes200ResponseResultsInner) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SearchRecipes200ResponseResultsInner) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SearchRecipes200ResponseResultsInner) SetId(v int32) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *SearchRecipes200ResponseResultsInner) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *SearchRecipes200ResponseResultsInner) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *SearchRecipes200ResponseResultsInner) SetTitle(v string) {
	o.Title = v
}

// GetCalories returns the Calories field value
func (o *SearchRecipes200ResponseResultsInner) GetCalories() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Calories
}

// GetCaloriesOk returns a tuple with the Calories field value
// and a boolean to check if the value has been set.
func (o *SearchRecipes200ResponseResultsInner) GetCaloriesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Calories, true
}

// SetCalories sets field value
func (o *SearchRecipes200ResponseResultsInner) SetCalories(v float32) {
	o.Calories = v
}

// GetCarbs returns the Carbs field value
func (o *SearchRecipes200ResponseResultsInner) GetCarbs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Carbs
}

// GetCarbsOk returns a tuple with the Carbs field value
// and a boolean to check if the value has been set.
func (o *SearchRecipes200ResponseResultsInner) GetCarbsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Carbs, true
}

// SetCarbs sets field value
func (o *SearchRecipes200ResponseResultsInner) SetCarbs(v string) {
	o.Carbs = v
}

// GetFat returns the Fat field value
func (o *SearchRecipes200ResponseResultsInner) GetFat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fat
}

// GetFatOk returns a tuple with the Fat field value
// and a boolean to check if the value has been set.
func (o *SearchRecipes200ResponseResultsInner) GetFatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fat, true
}

// SetFat sets field value
func (o *SearchRecipes200ResponseResultsInner) SetFat(v string) {
	o.Fat = v
}

// GetImage returns the Image field value
func (o *SearchRecipes200ResponseResultsInner) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *SearchRecipes200ResponseResultsInner) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *SearchRecipes200ResponseResultsInner) SetImage(v string) {
	o.Image = v
}

// GetImageType returns the ImageType field value
func (o *SearchRecipes200ResponseResultsInner) GetImageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageType
}

// GetImageTypeOk returns a tuple with the ImageType field value
// and a boolean to check if the value has been set.
func (o *SearchRecipes200ResponseResultsInner) GetImageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageType, true
}

// SetImageType sets field value
func (o *SearchRecipes200ResponseResultsInner) SetImageType(v string) {
	o.ImageType = v
}

// GetProtein returns the Protein field value
func (o *SearchRecipes200ResponseResultsInner) GetProtein() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protein
}

// GetProteinOk returns a tuple with the Protein field value
// and a boolean to check if the value has been set.
func (o *SearchRecipes200ResponseResultsInner) GetProteinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protein, true
}

// SetProtein sets field value
func (o *SearchRecipes200ResponseResultsInner) SetProtein(v string) {
	o.Protein = v
}

func (o SearchRecipes200ResponseResultsInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["calories"] = o.Calories
	}
	if true {
		toSerialize["carbs"] = o.Carbs
	}
	if true {
		toSerialize["fat"] = o.Fat
	}
	if true {
		toSerialize["image"] = o.Image
	}
	if true {
		toSerialize["imageType"] = o.ImageType
	}
	if true {
		toSerialize["protein"] = o.Protein
	}
	return json.Marshal(toSerialize)
}

type NullableSearchRecipes200ResponseResultsInner struct {
	value *SearchRecipes200ResponseResultsInner
	isSet bool
}

func (v NullableSearchRecipes200ResponseResultsInner) Get() *SearchRecipes200ResponseResultsInner {
	return v.value
}

func (v *NullableSearchRecipes200ResponseResultsInner) Set(val *SearchRecipes200ResponseResultsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchRecipes200ResponseResultsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchRecipes200ResponseResultsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchRecipes200ResponseResultsInner(val *SearchRecipes200ResponseResultsInner) *NullableSearchRecipes200ResponseResultsInner {
	return &NullableSearchRecipes200ResponseResultsInner{value: val, isSet: true}
}

func (v NullableSearchRecipes200ResponseResultsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchRecipes200ResponseResultsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


