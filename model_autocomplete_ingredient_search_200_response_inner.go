/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AutocompleteIngredientSearch200ResponseInner struct for AutocompleteIngredientSearch200ResponseInner
type AutocompleteIngredientSearch200ResponseInner struct {
	Name string `json:"name"`
	Image string `json:"image"`
	Id *int32 `json:"id,omitempty"`
	Aisle *string `json:"aisle,omitempty"`
	PossibleUnits []string `json:"possibleUnits,omitempty"`
}

// NewAutocompleteIngredientSearch200ResponseInner instantiates a new AutocompleteIngredientSearch200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutocompleteIngredientSearch200ResponseInner(name string, image string) *AutocompleteIngredientSearch200ResponseInner {
	this := AutocompleteIngredientSearch200ResponseInner{}
	this.Name = name
	this.Image = image
	return &this
}

// NewAutocompleteIngredientSearch200ResponseInnerWithDefaults instantiates a new AutocompleteIngredientSearch200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutocompleteIngredientSearch200ResponseInnerWithDefaults() *AutocompleteIngredientSearch200ResponseInner {
	this := AutocompleteIngredientSearch200ResponseInner{}
	return &this
}

// GetName returns the Name field value
func (o *AutocompleteIngredientSearch200ResponseInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AutocompleteIngredientSearch200ResponseInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AutocompleteIngredientSearch200ResponseInner) SetName(v string) {
	o.Name = v
}

// GetImage returns the Image field value
func (o *AutocompleteIngredientSearch200ResponseInner) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *AutocompleteIngredientSearch200ResponseInner) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *AutocompleteIngredientSearch200ResponseInner) SetImage(v string) {
	o.Image = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AutocompleteIngredientSearch200ResponseInner) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteIngredientSearch200ResponseInner) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AutocompleteIngredientSearch200ResponseInner) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AutocompleteIngredientSearch200ResponseInner) SetId(v int32) {
	o.Id = &v
}

// GetAisle returns the Aisle field value if set, zero value otherwise.
func (o *AutocompleteIngredientSearch200ResponseInner) GetAisle() string {
	if o == nil || o.Aisle == nil {
		var ret string
		return ret
	}
	return *o.Aisle
}

// GetAisleOk returns a tuple with the Aisle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteIngredientSearch200ResponseInner) GetAisleOk() (*string, bool) {
	if o == nil || o.Aisle == nil {
		return nil, false
	}
	return o.Aisle, true
}

// HasAisle returns a boolean if a field has been set.
func (o *AutocompleteIngredientSearch200ResponseInner) HasAisle() bool {
	if o != nil && o.Aisle != nil {
		return true
	}

	return false
}

// SetAisle gets a reference to the given string and assigns it to the Aisle field.
func (o *AutocompleteIngredientSearch200ResponseInner) SetAisle(v string) {
	o.Aisle = &v
}

// GetPossibleUnits returns the PossibleUnits field value if set, zero value otherwise.
func (o *AutocompleteIngredientSearch200ResponseInner) GetPossibleUnits() []string {
	if o == nil || o.PossibleUnits == nil {
		var ret []string
		return ret
	}
	return o.PossibleUnits
}

// GetPossibleUnitsOk returns a tuple with the PossibleUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteIngredientSearch200ResponseInner) GetPossibleUnitsOk() ([]string, bool) {
	if o == nil || o.PossibleUnits == nil {
		return nil, false
	}
	return o.PossibleUnits, true
}

// HasPossibleUnits returns a boolean if a field has been set.
func (o *AutocompleteIngredientSearch200ResponseInner) HasPossibleUnits() bool {
	if o != nil && o.PossibleUnits != nil {
		return true
	}

	return false
}

// SetPossibleUnits gets a reference to the given []string and assigns it to the PossibleUnits field.
func (o *AutocompleteIngredientSearch200ResponseInner) SetPossibleUnits(v []string) {
	o.PossibleUnits = v
}

func (o AutocompleteIngredientSearch200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["image"] = o.Image
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Aisle != nil {
		toSerialize["aisle"] = o.Aisle
	}
	if o.PossibleUnits != nil {
		toSerialize["possibleUnits"] = o.PossibleUnits
	}
	return json.Marshal(toSerialize)
}

type NullableAutocompleteIngredientSearch200ResponseInner struct {
	value *AutocompleteIngredientSearch200ResponseInner
	isSet bool
}

func (v NullableAutocompleteIngredientSearch200ResponseInner) Get() *AutocompleteIngredientSearch200ResponseInner {
	return v.value
}

func (v *NullableAutocompleteIngredientSearch200ResponseInner) Set(val *AutocompleteIngredientSearch200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableAutocompleteIngredientSearch200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableAutocompleteIngredientSearch200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutocompleteIngredientSearch200ResponseInner(val *AutocompleteIngredientSearch200ResponseInner) *NullableAutocompleteIngredientSearch200ResponseInner {
	return &NullableAutocompleteIngredientSearch200ResponseInner{value: val, isSet: true}
}

func (v NullableAutocompleteIngredientSearch200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutocompleteIngredientSearch200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


