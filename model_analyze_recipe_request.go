/*
spoonacular API

The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

API version: 1.1
Contact: mail@spoonacular.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AnalyzeRecipeRequest struct for AnalyzeRecipeRequest
type AnalyzeRecipeRequest struct {
	// The input language, either \"en\" or \"de\".
	Language *string `json:"language,omitempty"`
	// Whether nutrition data should be added to correctly parsed ingredients.
	IncludeNutrition *bool `json:"includeNutrition,omitempty"`
	// Whether taste data should be added to correctly parsed ingredients.
	IncludeTaste *bool `json:"includeTaste,omitempty"`
}

// NewAnalyzeRecipeRequest instantiates a new AnalyzeRecipeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyzeRecipeRequest() *AnalyzeRecipeRequest {
	this := AnalyzeRecipeRequest{}
	return &this
}

// NewAnalyzeRecipeRequestWithDefaults instantiates a new AnalyzeRecipeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyzeRecipeRequestWithDefaults() *AnalyzeRecipeRequest {
	this := AnalyzeRecipeRequest{}
	return &this
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *AnalyzeRecipeRequest) GetLanguage() string {
	if o == nil || o.Language == nil {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyzeRecipeRequest) GetLanguageOk() (*string, bool) {
	if o == nil || o.Language == nil {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *AnalyzeRecipeRequest) HasLanguage() bool {
	if o != nil && o.Language != nil {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *AnalyzeRecipeRequest) SetLanguage(v string) {
	o.Language = &v
}

// GetIncludeNutrition returns the IncludeNutrition field value if set, zero value otherwise.
func (o *AnalyzeRecipeRequest) GetIncludeNutrition() bool {
	if o == nil || o.IncludeNutrition == nil {
		var ret bool
		return ret
	}
	return *o.IncludeNutrition
}

// GetIncludeNutritionOk returns a tuple with the IncludeNutrition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyzeRecipeRequest) GetIncludeNutritionOk() (*bool, bool) {
	if o == nil || o.IncludeNutrition == nil {
		return nil, false
	}
	return o.IncludeNutrition, true
}

// HasIncludeNutrition returns a boolean if a field has been set.
func (o *AnalyzeRecipeRequest) HasIncludeNutrition() bool {
	if o != nil && o.IncludeNutrition != nil {
		return true
	}

	return false
}

// SetIncludeNutrition gets a reference to the given bool and assigns it to the IncludeNutrition field.
func (o *AnalyzeRecipeRequest) SetIncludeNutrition(v bool) {
	o.IncludeNutrition = &v
}

// GetIncludeTaste returns the IncludeTaste field value if set, zero value otherwise.
func (o *AnalyzeRecipeRequest) GetIncludeTaste() bool {
	if o == nil || o.IncludeTaste == nil {
		var ret bool
		return ret
	}
	return *o.IncludeTaste
}

// GetIncludeTasteOk returns a tuple with the IncludeTaste field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyzeRecipeRequest) GetIncludeTasteOk() (*bool, bool) {
	if o == nil || o.IncludeTaste == nil {
		return nil, false
	}
	return o.IncludeTaste, true
}

// HasIncludeTaste returns a boolean if a field has been set.
func (o *AnalyzeRecipeRequest) HasIncludeTaste() bool {
	if o != nil && o.IncludeTaste != nil {
		return true
	}

	return false
}

// SetIncludeTaste gets a reference to the given bool and assigns it to the IncludeTaste field.
func (o *AnalyzeRecipeRequest) SetIncludeTaste(v bool) {
	o.IncludeTaste = &v
}

func (o AnalyzeRecipeRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Language != nil {
		toSerialize["language"] = o.Language
	}
	if o.IncludeNutrition != nil {
		toSerialize["includeNutrition"] = o.IncludeNutrition
	}
	if o.IncludeTaste != nil {
		toSerialize["includeTaste"] = o.IncludeTaste
	}
	return json.Marshal(toSerialize)
}

type NullableAnalyzeRecipeRequest struct {
	value *AnalyzeRecipeRequest
	isSet bool
}

func (v NullableAnalyzeRecipeRequest) Get() *AnalyzeRecipeRequest {
	return v.value
}

func (v *NullableAnalyzeRecipeRequest) Set(val *AnalyzeRecipeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyzeRecipeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyzeRecipeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyzeRecipeRequest(val *AnalyzeRecipeRequest) *NullableAnalyzeRecipeRequest {
	return &NullableAnalyzeRecipeRequest{value: val, isSet: true}
}

func (v NullableAnalyzeRecipeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyzeRecipeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


